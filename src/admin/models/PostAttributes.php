<?php

namespace kodCommerce\admin\models;

use kodcommerce\models\attribute\KodCommerceProductAttributeModel;
use ronashdkl\kodCms\components\FieldConfig;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;

/**
 * Class PostAttributes
 * @package kodCommerce\admin\models
 * @property integer $post_id
 * @property string $name
 * @property string $value
 * @property array $config
 * @property KodCommerceAttribute $commerceAttribute
 */
class PostAttributes extends ActiveRecord
{

    public static function tableName()
    {
        return "{{%kodcommerce_product_attribute}}";
    }

    public function rules()
    {
        return [
            [
                ['name', 'value', 'post_id'],
                'required'
            ],
            ['config', 'safe'],
        ];
    }

    public function beforeSave($insert)
    {
        $this->config = json_encode($this->config);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        parent::afterFind();
        $this->config = json_decode($this->config, true);
    }

    public function getConfigValue($id)
    {
        return ArrayHelper::getValue($this->config, $id, null);
    }

    public function formTypes()
    {
        $fields = ['name' => [
            'type' => FieldConfig::SELECT,
            'config' => [
                'data' => ArrayHelper::map(KodCommerceAttribute::find()->asArray()->all(), 'name', 'name'),
                'options' => ['placeholder' => 'Select attribute ...'],
                'pluginEvents' => [
//                    "change" => "function(e) {  }",
//                    "select2:opening" => "function() {console.log('select2:opening'); }",
//                    "select2:open" => "function() { log('open'); }",
//                    "select2:closing" => "function() { log('close'); }",
//                    "select2:close" => "function() { log('close'); }",
////                   "select2:selecting" => "function() { console.log('selecting'); }",
 //                   "select2:select" => "function() { }",
//                    "select2:unselecting" => "function() { log('unselecting'); }",
//                    "select2:unselect" => "function() { log('unselect'); }"
                ]
            ],
            'group' => 'general'
        ],
            'value' => [
                'type' => FieldConfig::INPUT,
                'group' => 'general'
            ],
        ];
        $config = \Yii::$app->hooks->apply_filters('kodcommerce_product_attributes_forms', [
            'config[description]' => [
                'type' => FieldConfig::INPUT,
                'label'=>'Description',
                'group' => 'config'
            ],
        ]);

        return array_merge($fields, $config);
    }

    public  function get($name)
    {
       return ArrayHelper::getValue($this->config,$name,null);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCommerceAttribute()
    {
        return $this->hasOne(KodCommerceAttribute::class,['name'=>'name']);
    }

    public function beforeDelete()
    {
        ProductVariation::deleteAll(['like', 'variations', '"' . $this->value . '"']);
        return parent::beforeDelete();
    }
}